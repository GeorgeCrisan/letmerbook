{"version":3,"sources":["Components/Banner.jsx","Components/SearchForm.jsx","Components/BooksResults.jsx","App.js","serviceWorker.js","index.js"],"names":["Banner","SearchForm","BooksResults","App","useState","searchTerms","page","maxResults","typeText","type","state","setState","useEffect","axios","get","statenow","url","qString","q","startIndex","apikey","process","el","generateUrl","then","result","data","console","log","catch","error","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iMASeA,EAPA,WAGb,OAAQ,wCCIKC,EAPI,WAGjB,OAAQ,6CCIKC,EAPM,WAGnB,OAAQ,uC,iBCyDKC,MAxDf,WAAgB,IAAD,EAEaC,mBAAS,CAACC,YAAa,iBAC9CC,KAAM,IACPC,WAAY,IACZC,SAAU,cACVC,MAAM,IANK,mBAENC,EAFM,KAECC,EAFD,KA6Cb,OAlCAC,qBAAU,WAoBCC,IAAMC,IAlBG,WAChB,IAAIC,EAAWL,EACXM,EAAM,+CACRC,EAAU,CACRC,EAAGH,EAASV,YACZE,WAAYQ,EAASR,WACrBY,WAAYJ,EAAST,KACrBc,OAAQC,2CAGV,IAAI,IAAIC,KAAML,EACVD,GAAc,MAAPM,EAAcA,EAAK,IAAML,EAAQK,GAAQ,IAAMA,EAAK,IAAML,EAAQK,GAG7E,OAAON,EAIQO,IAGNC,MAAK,SAACC,GACjB,IAAIC,EAAOD,EAAOC,KAClBC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,MACXG,OAAM,SAACC,GACRH,QAAQC,IAAI,QAASE,QAIvB,CAACpB,IAGD,yBAAKqB,UAAU,OACb,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYpB,SAAUA,IACtB,kBAAC,EAAD,SC5CYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMiB,c","file":"static/js/main.9abac9ad.chunk.js","sourcesContent":["import React from 'react';\n\nconst Banner = () => {\n\n\n  return (<div>Banner</div>);\n} \n\n\nexport default Banner;","import React from 'react';\n\nconst SearchForm = () => {\n\n\n  return (<div>Search Form</div>);\n} \n\n\nexport default SearchForm;","import React from 'react';\n\nconst BooksResults = () => {\n\n\n  return (<div>Books</div>);\n} \n\n\nexport default BooksResults;","import React , {useState, useEffect} from 'react';\nimport Banner from './Components/Banner';\nimport SearchForm from './Components/SearchForm';\nimport BooksResults from './Components/BooksResults';\nimport axios from 'axios';\n\nfunction App() {\n\n  const [state, setState] = useState({searchTerms: \"Atlas Shrugged\",\n     page: \"0\",\n    maxResults: \"6\",\n    typeText: \"free-ebooks\",\n    type: false\n  });\n \n  \n\n  useEffect(()=>{\n\n    let generateUrl = ()=> {\n      let statenow = state;\n      let url = 'https://www.googleapis.com/books/v1/volumes?',\n        qString = {\n          q: statenow.searchTerms,\n          maxResults: statenow.maxResults,\n          startIndex: statenow.page,\n          apikey: process.env.REACT_APP_API_KEY\n        };\n  \n        for(let el in qString) {\n            url += el === 'q' ? (el + '=' + qString[el]) : ('&' + el + '=' + qString[el]); \n        }\n  \n        return url;\n    };\n\n    let fetchBooks = ()=>{\n      return axios.get(generateUrl());\n    };\n\n    fetchBooks().then((result)=>{\n      let data = result.data;\n      console.log(result);\n      console.log(data);\n    }).catch((error)=>{\n      console.log('Error', error);\n    });\n\n \n  },[state]);\n\n  return (\n    <div className=\"App\">\n      <>  \n        <Banner />\n        <SearchForm setState={setState} />\n        <BooksResults />\n      </>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}